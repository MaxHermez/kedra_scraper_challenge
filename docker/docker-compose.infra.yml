services:
  mongodb:
    image: bitnami/mongodb
    container_name: mongodb_dagster
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    ports: ["27017:27017"]
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console
    networks: [backend]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  # one-off bucket bootstrap
  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks: [backend]
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} &&
      mc mb -p local/${LANDING_BUCKET} || true &&
      mc mb -p local/${CLEAN_BUCKET}   || true &&
      echo 'Buckets ensured'
      "
    restart: "no"

  postgres:
    image: postgres:15
    container_name: dagster_postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports: ["5432:5432"]
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB} -h localhost"]
      interval: 10s
      timeout: 8s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data

networks:
  backend:
    driver: bridge

volumes:
  mongo_data:
  minio_data:
  pg_data:
